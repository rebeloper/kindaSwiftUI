// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-tvos16.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name kindaSwiftUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
@_exported import kindaSwiftUI
import kindaSwiftUI247
extension SwiftUI.Color {
  public init(hex: Swift.String)
}
@_Concurrency.MainActor(unsafe) public struct RouterStack<Destination> : SwiftUI.View where Destination : kindaSwiftUI.RouterDestination {
  @_Concurrency.MainActor(unsafe) public init(root: Destination)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12kindaSwiftUI11RouterStackV4bodyQrvp", 0) __<Destination>
}
public class Router<Destination> : Combine.ObservableObject where Destination : kindaSwiftUI.RouterDestination {
  @Combine.Published @_projectedValueProperty($modalsState) public var modalsState: [Swift.Array<Swift.Bool>] {
    get
    set
    _modify
  }
  public var $modalsState: Combine.Published<[Swift.Array<Swift.Bool>]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($activeModalsIndices) public var activeModalsIndices: [[Swift.Int]] {
    get
    set
    _modify
  }
  public var $activeModalsIndices: Combine.Published<[[Swift.Int]]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($tabSelection) public var tabSelection: Swift.Int {
    get
    set
    _modify
  }
  public var $tabSelection: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($paths) public var paths: [Swift.Array<SwiftUI.NavigationPath>] {
    get
    set
    _modify
  }
  public var $paths: Combine.Published<[Swift.Array<SwiftUI.NavigationPath>]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($pathIndex) public var pathIndex: [Swift.Int] {
    get
    set
    _modify
  }
  public var $pathIndex: Combine.Published<[Swift.Int]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($modalsCount) public var modalsCount: [Swift.Int] {
    get
    set
    _modify
  }
  public var $modalsCount: Combine.Published<[Swift.Int]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($stackedViewsInModals) public var stackedViewsInModals: [[Swift.Int]] {
    get
    set
    _modify
  }
  public var $stackedViewsInModals: Combine.Published<[[Swift.Int]]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public func push(_ destination: Destination, completion: @escaping () -> () = {})
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func push(_ destination: Destination) async
  #endif
  public func present(_ destination: Destination, completion: @escaping () -> () = {})
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func present(_ destination: Destination) async
  #endif
  public func pop(_ type: kindaSwiftUI.PopType = .one, completion: @escaping () -> () = {})
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func pop(_ type: kindaSwiftUI.PopType = .one) async
  #endif
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum PopType {
  case one
  case the(last: Swift.Int)
  case to(index: Swift.Int)
  case toRoot
  case toNearestRoot
  case theLastWith(style: kindaSwiftUI.PopStyle, last: Swift.Int)
  case toIndexWith(style: kindaSwiftUI.PopStyle, index: Swift.Int)
  case toRootWith(style: kindaSwiftUI.PopStyle)
  case toNearestRootWith(style: kindaSwiftUI.PopStyle)
}
public enum PopStyle : Swift.String {
  case oneByOne, shortest
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol RouterDestination : Swift.Hashable, SwiftUI.View {
  var modalValue: Swift.Int { get }
  init?(modalValue: Swift.Int)
}
extension kindaSwiftUI.PopStyle : Swift.Equatable {}
extension kindaSwiftUI.PopStyle : Swift.Hashable {}
extension kindaSwiftUI.PopStyle : Swift.RawRepresentable {}
